{
  "paragraphs": [
    {
      "title": "Initialize environment",
      "text": "%spark\n// load all libs and create SparkContext\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.Column\nimport org.apache.spark.sql.DataFrame\nimport org.apache.log4j.{Level, Logger}\n\nimport scala.util.Random\nimport java.sql.Date\n\n// turn off logs for all imports\nLogger.getLogger(\"org\").setLevel(Level.OFF)\n\n// val spark = {\n//   SparkSession.builder()\n//     .master(\"spark://spark-master:7077\")\n//     .getOrCreate()\n// }\n\nimport spark.implicits._",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:14:03+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.Column\nimport org.apache.spark.sql.DataFrame\nimport org.apache.log4j.{Level, Logger}\nimport scala.util.Random\nimport java.sql.Date\nimport spark.implicits._\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_1076997823",
      "id": "20220615-084015_1969982740",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-22T19:14:03+0000",
      "dateFinished": "2022-08-22T19:14:38+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:183"
    },
    {
      "title": "Load data",
      "text": "%spark\n// load data from csv files into dataframes\nvar odmSourceDF = spark.read.option(\"header\", true).csv(\"/notebook/data/odm_data.csv\")\nvar hriwSourceDF = spark.read.option(\"header\", true).csv(\"/notebook/data/hriw_data.csv\")\n\n// create array of required column names without 'sk_employee'\nval odmCols  = odmSourceDF.columns.filter(_!=\"sk_employee\").map(col(_))\nval hriwCols = hriwSourceDF.columns.filter(_!=\"sk_employee\").map(col(_))\n\n// drop 'sk_employee' column\nodmSourceDF = odmSourceDF.select(odmCols:_*)\nhriwSourceDF = hriwSourceDF.select(hriwCols:_*)",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T13:46:12+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34modmSourceDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, odm_attr1: string ... 3 more fields]\n\u001b[1m\u001b[34mhriwSourceDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, hriw_attr1: string ... 3 more fields]\n\u001b[1m\u001b[34modmCols\u001b[0m: \u001b[1m\u001b[32mArray[org.apache.spark.sql.Column]\u001b[0m = Array(cnum, odm_attr1, eff_date, deleted_indicator, ts)\n\u001b[1m\u001b[34mhriwCols\u001b[0m: \u001b[1m\u001b[32mArray[org.apache.spark.sql.Column]\u001b[0m = Array(cnum, hriw_attr1, eff_date, deleted_indicator, ts)\nodmSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, odm_attr1: string ... 3 more fields]\nhriwSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, hriw_attr1: string ... 3 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=0",
              "$$hashKey": "object:1681"
            },
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=1",
              "$$hashKey": "object:1682"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_2144795028",
      "id": "20220615-084015_627389655",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-22T13:45:48+0000",
      "dateFinished": "2022-08-22T13:46:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:186"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+odmSourceDF.count)\nodmSourceDF.orderBy(\"cnum\", \"ts\").show",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:20:12+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 19\n+----+----------+----------+-----------------+----------+\n|cnum| odm_attr1|  eff_date|deleted_indicator|        ts|\n+----+----------+----------+-----------------+----------+\n|  11|odm_a1_1v1|12/15/2021|                N|1639526401|\n|  11|odm_a1_1v2|  1/6/2022|                N|1641427202|\n|  11|odm_a1_1v3|  1/9/2022|                N|1641686403|\n|  22|odm_a1_2v1|12/20/2021|                N|1639958401|\n|  22|odm_a1_2v2|  3/3/2022|                N|1646265602|\n|  33|odm_a1_3v1|  1/1/2019|                N|1546300803|\n|  33|odm_a1_3v2|10/10/2019|                N|1570665601|\n|  33|odm_a1_3v3| 3/22/2021|                N|1616371202|\n|  44|odm_a1_4v1| 2/11/2019|                N|1549843203|\n|  44|      null|12/11/2021|                N|1639180801|\n|  55|odm_a1_5v1|12/10/2021|                N|1639094402|\n|  55|odm_a1_5v2|12/10/2021|                N|1639094403|\n|  55|odm_a1_5v3| 2/21/2022|                N|1645401601|\n|  66|odm_a1_6v1| 10/8/2018|                N|1538956802|\n|  66|odm_a1_6v2|11/11/2018|                Y|1541894403|\n|  66|odm_a1_6v3|  4/2/2019|                N|1554163201|\n|  66|odm_a1_6v4|12/12/2021|                N|1639267202|\n|  66|odm_a1_6v5| 2/22/2022|                N|1645488003|\n|  66|odm_a1_6v6|10/10/2022|                Y|1665360001|\n+----+----------+----------+-----------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=2",
              "$$hashKey": "object:2948"
            },
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=3",
              "$$hashKey": "object:2949"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657704521164_133572767",
      "id": "paragraph_1657704521164_133572767",
      "dateCreated": "2022-07-13T09:28:41+0000",
      "dateStarted": "2022-08-22T13:46:14+0000",
      "dateFinished": "2022-08-22T13:46:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:187"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+hriwSourceDF.count)\nhriwSourceDF.orderBy(\"cnum\", \"ts\").show",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T13:46:17+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 21\n+----+-----------+----------+-----------------+----------+\n|cnum| hriw_attr1|  eff_date|deleted_indicator|        ts|\n+----+-----------+----------+-----------------+----------+\n|  11|hriw_a1_1v1|12/10/2021|                N|1639094401|\n|  11|hriw_a1_1v2|  1/1/2022|                N|1640995202|\n|  11|hriw_a1_1v3| 2/21/2022|                N|1645401603|\n|  22|hriw_a1_2v1|12/15/2021|                N|1639526401|\n|  22|hriw_a1_2v2|  4/4/2022|                N|1649030402|\n|  33|hriw_a1_3v1| 2/10/2019|                N|1549756803|\n|  33|hriw_a1_3v2|12/12/2021|                N|1639267201|\n|  33|hriw_a1_3v3|  5/5/2022|                Y|1651708802|\n|  44|       null| 2/11/2019|                N|1549843203|\n|  44|hriw_a1_4v1|12/11/2021|                N|1639180801|\n|  44|       null|  5/4/2022|                N|1651622402|\n|  44|hriw_a1_4v2|  5/6/2022|                N|1651795203|\n|  55|hriw_a1_5v1|12/10/2021|                N|1639094401|\n|  55|hriw_a1_5v2|12/10/2021|                N|1639094402|\n|  55|hriw_a1_5v3|12/10/2021|                N|1639094403|\n|  55|hriw_a1_5v4|12/11/2021|                N|1639180801|\n|  55|hriw_a1_5v5| 2/21/2022|                N|1645401602|\n|  66|hriw_a1_6v1| 6/24/2018|                N|1529798403|\n|  66|       null| 7/14/2019|                Y|1563062401|\n|  66|hriw_a1_6v2|10/15/2021|                N|1634256002|\n+----+-----------+----------+-----------------+----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=4",
              "$$hashKey": "object:1711"
            },
            {
              "jobUrl": "http://d73ad758981e:4040/jobs/job?id=5",
              "$$hashKey": "object:1712"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657704533548_1395752566",
      "id": "paragraph_1657704533548_1395752566",
      "dateCreated": "2022-07-13T09:28:53+0000",
      "dateStarted": "2022-08-22T13:46:17+0000",
      "dateFinished": "2022-08-22T13:46:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:188"
    },
    {
      "title": "Generate date ranges",
      "text": "%spark\n// convert 'ts' field to yyyy.mm.dd format for both tables, union them and leave unique records\nval validDates = odmSourceDF.select(col(\"cnum\"), to_date(from_unixtime($\"ts\")).as(\"date\"))\n                .union(\n                hriwSourceDF.select(col(\"cnum\"), to_date(from_unixtime($\"ts\")).as(\"date\")\n                )\n            ).distinct",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mvalidDates\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [cnum: string, date: date]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_711412381",
      "id": "20220615-084015_2063672334",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:25:48+0000",
      "dateFinished": "2022-08-03T12:25:49+0000",
      "status": "FINISHED",
      "$$hashKey": "object:189"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+validDates.count)\nvalidDates.orderBy(\"cnum\", \"date\").show(validDates.count.toInt)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 33\n+----+----------+\n|cnum|      date|\n+----+----------+\n|  11|2021-12-10|\n|  11|2021-12-15|\n|  11|2022-01-01|\n|  11|2022-01-06|\n|  11|2022-01-09|\n|  11|2022-02-21|\n|  22|2021-12-15|\n|  22|2021-12-20|\n|  22|2022-03-03|\n|  22|2022-04-04|\n|  33|2019-01-01|\n|  33|2019-02-10|\n|  33|2019-10-10|\n|  33|2021-03-22|\n|  33|2021-12-12|\n|  33|2022-05-05|\n|  44|2019-02-11|\n|  44|2021-12-11|\n|  44|2022-05-04|\n|  44|2022-05-06|\n|  55|2021-12-10|\n|  55|2021-12-11|\n|  55|2022-02-21|\n|  66|2018-06-24|\n|  66|2018-10-08|\n|  66|2018-11-11|\n|  66|2019-04-02|\n|  66|2019-07-14|\n|  66|2021-10-15|\n|  66|2021-11-24|\n|  66|2021-12-12|\n|  66|2022-02-22|\n|  66|2022-10-10|\n+----+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=6",
              "$$hashKey": "object:1735"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=7",
              "$$hashKey": "object:1736"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=8",
              "$$hashKey": "object:1737"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657795135514_687520992",
      "id": "paragraph_1657795135514_687520992",
      "dateCreated": "2022-07-14T10:38:55+0000",
      "dateStarted": "2022-08-03T12:25:49+0000",
      "dateFinished": "2022-08-03T12:25:54+0000",
      "status": "FINISHED",
      "$$hashKey": "object:190"
    },
    {
      "text": "%spark\n// window function object\nval w = Window.partitionBy(\"cnum\").orderBy(\"eff_date\")\n\n// creates expiration date column which equals 'eff_date-1' of next record\nval validDateRanges = validDates\n    .withColumnRenamed(\"date\", \"eff_date\")\n    \n    // create colunm 'exp_date_tmp' and fill it with next record's (eff_date-1), do it for every 'cnum' partition\n    .withColumn(\"exp_date_tmp\", date_sub(lead(\"eff_date\", 1).over(w), 1))\n    \n    // copy 'exp_date_tmp' to 'exp_date' with filled nulls on the edge of every partition\n    .withColumn(\"exp_date\", when(col(\"exp_date_tmp\").isNull,Date.valueOf(\"9999-12-31\")).otherwise(col(\"exp_date_tmp\")))\n    \n    // drop temporary 'exp_date_tmp' column\n    .drop(\"exp_date_tmp\")",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@673509a4\n\u001b[1m\u001b[34mvalidDateRanges\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, eff_date: date ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_1403978901",
      "id": "20220615-084015_750240152",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:25:54+0000",
      "dateFinished": "2022-08-03T12:25:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:191"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+validDateRanges.count)\nvalidDateRanges.orderBy(\"cnum\", \"eff_date\").show(validDateRanges.count.toInt)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 50,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 208,
              "optionOpen": false
            }
          }
        },
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 33\n+----+----------+----------+\n|cnum|  eff_date|  exp_date|\n+----+----------+----------+\n|  11|2021-12-10|2021-12-14|\n|  11|2021-12-15|2021-12-31|\n|  11|2022-01-01|2022-01-05|\n|  11|2022-01-06|2022-01-08|\n|  11|2022-01-09|2022-02-20|\n|  11|2022-02-21|9999-12-31|\n|  22|2021-12-15|2021-12-19|\n|  22|2021-12-20|2022-03-02|\n|  22|2022-03-03|2022-04-03|\n|  22|2022-04-04|9999-12-31|\n|  33|2019-01-01|2019-02-09|\n|  33|2019-02-10|2019-10-09|\n|  33|2019-10-10|2021-03-21|\n|  33|2021-03-22|2021-12-11|\n|  33|2021-12-12|2022-05-04|\n|  33|2022-05-05|9999-12-31|\n|  44|2019-02-11|2021-12-10|\n|  44|2021-12-11|2022-05-03|\n|  44|2022-05-04|2022-05-05|\n|  44|2022-05-06|9999-12-31|\n|  55|2021-12-10|2021-12-10|\n|  55|2021-12-11|2022-02-20|\n|  55|2022-02-21|9999-12-31|\n|  66|2018-06-24|2018-10-07|\n|  66|2018-10-08|2018-11-10|\n|  66|2018-11-11|2019-04-01|\n|  66|2019-04-02|2019-07-13|\n|  66|2019-07-14|2021-10-14|\n|  66|2021-10-15|2021-11-23|\n|  66|2021-11-24|2021-12-11|\n|  66|2021-12-12|2022-02-21|\n|  66|2022-02-22|2022-10-09|\n|  66|2022-10-10|9999-12-31|\n+----+----------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=9",
              "$$hashKey": "object:1762"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=10",
              "$$hashKey": "object:1763"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=11",
              "$$hashKey": "object:1764"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657702206161_1494129403",
      "id": "paragraph_1657702206161_1494129403",
      "dateCreated": "2022-07-13T08:50:06+0000",
      "dateStarted": "2022-08-03T12:25:55+0000",
      "dateFinished": "2022-08-03T12:25:59+0000",
      "status": "FINISHED",
      "$$hashKey": "object:192"
    },
    {
      "title": "Clear data",
      "text": "%spark\nval last_state = org.apache.spark.sql.expressions.Window.partitionBy(\"cnum\", \"eff_date\").orderBy(col(\"ts\").desc)\n\n// leave only last record from each day\ndef lastRecordInDay(df: DataFrame) = {\n    df\n    // convert unix milliseonds to yyyy.mm.dd\n    .withColumn(\"eff_date\", to_date(from_unixtime($\"ts\")))\n    \n    // numerate rows for in every day for every 'cnum'\n    .withColumn(\"tmp_rn\", row_number().over(last_state))\n    \n    // leave only first record from all records recieved on this day\n    .filter(col(\"tmp_rn\")===1)\n    .drop(\"tmp_rn\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 85,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mlast_state\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@12f141a8\n\u001b[1m\u001b[34mlastRecordInDay\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_1667818943",
      "id": "20220615-084015_85846583",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:25:59+0000",
      "dateFinished": "2022-08-03T12:26:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:193"
    },
    {
      "text": "%spark\nodmSourceDF = lastRecordInDay(odmSourceDF)\nhriwSourceDF = lastRecordInDay(hriwSourceDF)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "odmSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, odm_attr1: string ... 3 more fields]\nhriwSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, hriw_attr1: string ... 3 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657751066878_2092966967",
      "id": "paragraph_1657751066878_2092966967",
      "dateCreated": "2022-07-13T22:24:26+0000",
      "dateStarted": "2022-08-03T12:26:00+0000",
      "dateFinished": "2022-08-03T12:26:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:194"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+odmSourceDF.count)\nodmSourceDF.orderBy(\"cnum\", \"eff_date\").show",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 5,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 18\n+----+----------+----------+-----------------+----------+\n|cnum| odm_attr1|  eff_date|deleted_indicator|        ts|\n+----+----------+----------+-----------------+----------+\n|  11|odm_a1_1v1|2021-12-15|                N|1639526401|\n|  11|odm_a1_1v2|2022-01-06|                N|1641427202|\n|  11|odm_a1_1v3|2022-01-09|                N|1641686403|\n|  22|odm_a1_2v1|2021-12-20|                N|1639958401|\n|  22|odm_a1_2v2|2022-03-03|                N|1646265602|\n|  33|odm_a1_3v1|2019-01-01|                N|1546300803|\n|  33|odm_a1_3v2|2019-10-10|                N|1570665601|\n|  33|odm_a1_3v3|2021-03-22|                N|1616371202|\n|  44|odm_a1_4v1|2019-02-11|                N|1549843203|\n|  44|      null|2021-12-11|                N|1639180801|\n|  55|odm_a1_5v2|2021-12-10|                N|1639094403|\n|  55|odm_a1_5v3|2022-02-21|                N|1645401601|\n|  66|odm_a1_6v1|2018-10-08|                N|1538956802|\n|  66|odm_a1_6v2|2018-11-11|                Y|1541894403|\n|  66|odm_a1_6v3|2019-04-02|                N|1554163201|\n|  66|odm_a1_6v4|2021-12-12|                N|1639267202|\n|  66|odm_a1_6v5|2022-02-22|                N|1645488003|\n|  66|odm_a1_6v6|2022-10-10|                Y|1665360001|\n+----+----------+----------+-----------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=12",
              "$$hashKey": "object:1798"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=13",
              "$$hashKey": "object:1799"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657706719363_258142077",
      "id": "paragraph_1657706719363_258142077",
      "dateCreated": "2022-07-13T10:05:19+0000",
      "dateStarted": "2022-08-03T12:26:00+0000",
      "dateFinished": "2022-08-03T12:26:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:195"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+hriwSourceDF.count)\nhriwSourceDF.orderBy(\"cnum\").show",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 55,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 19\n+----+-----------+----------+-----------------+----------+\n|cnum| hriw_attr1|  eff_date|deleted_indicator|        ts|\n+----+-----------+----------+-----------------+----------+\n|  11|hriw_a1_1v3|2022-02-21|                N|1645401603|\n|  11|hriw_a1_1v1|2021-12-10|                N|1639094401|\n|  11|hriw_a1_1v2|2022-01-01|                N|1640995202|\n|  22|hriw_a1_2v2|2022-04-04|                N|1649030402|\n|  22|hriw_a1_2v1|2021-12-15|                N|1639526401|\n|  33|hriw_a1_3v2|2021-12-12|                N|1639267201|\n|  33|hriw_a1_3v1|2019-02-10|                N|1549756803|\n|  33|hriw_a1_3v3|2022-05-05|                Y|1651708802|\n|  44|       null|2019-02-11|                N|1549843203|\n|  44|       null|2022-05-04|                N|1651622402|\n|  44|hriw_a1_4v1|2021-12-11|                N|1639180801|\n|  44|hriw_a1_4v2|2022-05-06|                N|1651795203|\n|  55|hriw_a1_5v4|2021-12-11|                N|1639180801|\n|  55|hriw_a1_5v3|2021-12-10|                N|1639094403|\n|  55|hriw_a1_5v5|2022-02-21|                N|1645401602|\n|  66|hriw_a1_6v2|2021-10-15|                N|1634256002|\n|  66|       null|2021-11-24|                Y|1637712003|\n|  66|       null|2019-07-14|                Y|1563062401|\n|  66|hriw_a1_6v1|2018-06-24|                N|1529798403|\n+----+-----------+----------+-----------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=14",
              "$$hashKey": "object:1813"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=15",
              "$$hashKey": "object:1814"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657706713639_761022217",
      "id": "paragraph_1657706713639_761022217",
      "dateCreated": "2022-07-13T10:05:13+0000",
      "dateStarted": "2022-08-03T12:26:03+0000",
      "dateFinished": "2022-08-03T12:26:04+0000",
      "status": "FINISHED",
      "$$hashKey": "object:196"
    },
    {
      "title": "Calculate expiration date",
      "text": "%spark\n//Add exp_date\nval get_exp_date = org.apache.spark.sql.expressions.Window.partitionBy(\"cnum\").orderBy(col(\"ts\"))\n\n// It's the same like previous code in \"Generate data ranges\", but sets 'exp_date' to 'eff_date', if 'deleted_indicator' is true\ndef addExpirationDate(df: DataFrame) = {\n    df\n    // get next 'eff_date' and substract 1 day from it\n    .withColumn(\"exp_date_tmp\", date_sub(lead(\"eff_date\", 1).over(get_exp_date), 1))\n    .withColumn(\"exp_date\",\n        // if record is deleted, set its 'exp_date'='eff_date'\n        when(col(\"deleted_indicator\")===\"Y\", col(\"eff_date\"))\n        // \n        .otherwise(\n            when(col(\"exp_date_tmp\").isNull, Date.valueOf(\"9999-12-31\"))\n            .otherwise(col(\"exp_date_tmp\"))\n            )\n        )\n    .drop(\"exp_date_tmp\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mget_exp_date\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@53f2028a\n\u001b[1m\u001b[34maddExpirationDate\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_1305002606",
      "id": "20220615-084015_156415439",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:26:05+0000",
      "dateFinished": "2022-08-03T12:26:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:197"
    },
    {
      "text": "%spark\nodmSourceDF = addExpirationDate(odmSourceDF)\nhriwSourceDF = addExpirationDate(hriwSourceDF)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "odmSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, odm_attr1: string ... 4 more fields]\nhriwSourceDF: org.apache.spark.sql.DataFrame = [cnum: string, hriw_attr1: string ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657717451384_1311161012",
      "id": "paragraph_1657717451384_1311161012",
      "dateCreated": "2022-07-13T13:04:11+0000",
      "dateStarted": "2022-08-03T12:26:05+0000",
      "dateFinished": "2022-08-03T12:26:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:198"
    },
    {
      "text": "%spark\nodmSourceDF.show",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 4,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+----------+----------+-----------------+----------+----------+\n|cnum| odm_attr1|  eff_date|deleted_indicator|        ts|  exp_date|\n+----+----------+----------+-----------------+----------+----------+\n|  11|odm_a1_1v1|2021-12-15|                N|1639526401|2022-01-05|\n|  11|odm_a1_1v2|2022-01-06|                N|1641427202|2022-01-08|\n|  11|odm_a1_1v3|2022-01-09|                N|1641686403|9999-12-31|\n|  22|odm_a1_2v1|2021-12-20|                N|1639958401|2022-03-02|\n|  22|odm_a1_2v2|2022-03-03|                N|1646265602|9999-12-31|\n|  55|odm_a1_5v2|2021-12-10|                N|1639094403|2022-02-20|\n|  55|odm_a1_5v3|2022-02-21|                N|1645401601|9999-12-31|\n|  44|odm_a1_4v1|2019-02-11|                N|1549843203|2021-12-10|\n|  44|      null|2021-12-11|                N|1639180801|9999-12-31|\n|  33|odm_a1_3v1|2019-01-01|                N|1546300803|2019-10-09|\n|  33|odm_a1_3v2|2019-10-10|                N|1570665601|2021-03-21|\n|  33|odm_a1_3v3|2021-03-22|                N|1616371202|9999-12-31|\n|  66|odm_a1_6v1|2018-10-08|                N|1538956802|2018-11-10|\n|  66|odm_a1_6v2|2018-11-11|                Y|1541894403|2018-11-11|\n|  66|odm_a1_6v3|2019-04-02|                N|1554163201|2021-12-11|\n|  66|odm_a1_6v4|2021-12-12|                N|1639267202|2022-02-21|\n|  66|odm_a1_6v5|2022-02-22|                N|1645488003|2022-10-09|\n|  66|odm_a1_6v6|2022-10-10|                Y|1665360001|2022-10-10|\n+----+----------+----------+-----------------+----------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=16",
              "$$hashKey": "object:1846"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=17",
              "$$hashKey": "object:1847"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=18",
              "$$hashKey": "object:1848"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=19",
              "$$hashKey": "object:1849"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=20",
              "$$hashKey": "object:1850"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657702984939_138712792",
      "id": "paragraph_1657702984939_138712792",
      "dateCreated": "2022-07-13T09:03:04+0000",
      "dateStarted": "2022-08-03T12:26:05+0000",
      "dateFinished": "2022-08-03T12:26:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:199"
    },
    {
      "text": "%spark\nhriwSourceDF.show",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-----------+----------+-----------------+----------+----------+\n|cnum| hriw_attr1|  eff_date|deleted_indicator|        ts|  exp_date|\n+----+-----------+----------+-----------------+----------+----------+\n|  11|hriw_a1_1v1|2021-12-10|                N|1639094401|2021-12-31|\n|  11|hriw_a1_1v2|2022-01-01|                N|1640995202|2022-02-20|\n|  11|hriw_a1_1v3|2022-02-21|                N|1645401603|9999-12-31|\n|  22|hriw_a1_2v1|2021-12-15|                N|1639526401|2022-04-03|\n|  22|hriw_a1_2v2|2022-04-04|                N|1649030402|9999-12-31|\n|  55|hriw_a1_5v3|2021-12-10|                N|1639094403|2021-12-10|\n|  55|hriw_a1_5v4|2021-12-11|                N|1639180801|2022-02-20|\n|  55|hriw_a1_5v5|2022-02-21|                N|1645401602|9999-12-31|\n|  44|       null|2019-02-11|                N|1549843203|2021-12-10|\n|  44|hriw_a1_4v1|2021-12-11|                N|1639180801|2022-05-03|\n|  44|       null|2022-05-04|                N|1651622402|2022-05-05|\n|  44|hriw_a1_4v2|2022-05-06|                N|1651795203|9999-12-31|\n|  33|hriw_a1_3v1|2019-02-10|                N|1549756803|2021-12-11|\n|  33|hriw_a1_3v2|2021-12-12|                N|1639267201|2022-05-04|\n|  33|hriw_a1_3v3|2022-05-05|                Y|1651708802|2022-05-05|\n|  66|hriw_a1_6v1|2018-06-24|                N|1529798403|2019-07-13|\n|  66|       null|2019-07-14|                Y|1563062401|2019-07-14|\n|  66|hriw_a1_6v2|2021-10-15|                N|1634256002|2021-11-23|\n|  66|       null|2021-11-24|                Y|1637712003|2021-11-24|\n+----+-----------+----------+-----------------+----------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=21",
              "$$hashKey": "object:1870"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=22",
              "$$hashKey": "object:1871"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=23",
              "$$hashKey": "object:1872"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=24",
              "$$hashKey": "object:1873"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=25",
              "$$hashKey": "object:1874"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518144_1616410966",
      "id": "paragraph_1655284490653_611806623",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:26:07+0000",
      "dateFinished": "2022-08-03T12:26:09+0000",
      "status": "FINISHED",
      "$$hashKey": "object:200"
    },
    {
      "title": "Join dimensions",
      "text": "%spark\nval range_hriw_join = validDateRanges.as(\"range\")\n   .join(\n       hriwSourceDF.as(\"hriw\"),\n       \n       // join dimension record if its date range [eff_date, exp_date] overlaps with validDateRange in any way\n       hriwSourceDF(\"cnum\")===validDateRanges(\"cnum\")\n       && hriwSourceDF(\"eff_date\")<=validDateRanges(\"exp_date\")\n       && hriwSourceDF(\"exp_date\")>=validDateRanges(\"eff_date\"),\n       \"left\"\n    )\n    .select(col(\"range.cnum\"),\n            col(\"range.eff_date\").as(\"range_eff_date\"), \n            col(\"range.exp_date\").as(\"range_exp_date\"), \n            col(\"hriw_attr1\"),\n            col(\"deleted_indicator\"),\n            col(\"ts\")\n        )",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mrange_hriw_join\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, range_eff_date: date ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657673307105_1391356404",
      "id": "paragraph_1657673307105_1391356404",
      "dateCreated": "2022-07-13T00:48:27+0000",
      "dateStarted": "2022-08-03T12:26:09+0000",
      "dateFinished": "2022-08-03T12:26:09+0000",
      "status": "FINISHED",
      "$$hashKey": "object:201"
    },
    {
      "text": "%spark\n// take a look what's inside\nprintln(\"number of records: \"+range_hriw_join.count)\nrange_hriw_join.orderBy(\"cnum\", \"range_eff_date\").show(range_hriw_join.count.toInt)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 50,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 33\n+----+--------------+--------------+-----------+-----------------+----------+\n|cnum|range_eff_date|range_exp_date| hriw_attr1|deleted_indicator|        ts|\n+----+--------------+--------------+-----------+-----------------+----------+\n|  11|    2021-12-10|    2021-12-14|hriw_a1_1v1|                N|1639094401|\n|  11|    2021-12-15|    2021-12-31|hriw_a1_1v1|                N|1639094401|\n|  11|    2022-01-01|    2022-01-05|hriw_a1_1v2|                N|1640995202|\n|  11|    2022-01-06|    2022-01-08|hriw_a1_1v2|                N|1640995202|\n|  11|    2022-01-09|    2022-02-20|hriw_a1_1v2|                N|1640995202|\n|  11|    2022-02-21|    9999-12-31|hriw_a1_1v3|                N|1645401603|\n|  22|    2021-12-15|    2021-12-19|hriw_a1_2v1|                N|1639526401|\n|  22|    2021-12-20|    2022-03-02|hriw_a1_2v1|                N|1639526401|\n|  22|    2022-03-03|    2022-04-03|hriw_a1_2v1|                N|1639526401|\n|  22|    2022-04-04|    9999-12-31|hriw_a1_2v2|                N|1649030402|\n|  33|    2019-01-01|    2019-02-09|       null|             null|      null|\n|  33|    2019-02-10|    2019-10-09|hriw_a1_3v1|                N|1549756803|\n|  33|    2019-10-10|    2021-03-21|hriw_a1_3v1|                N|1549756803|\n|  33|    2021-03-22|    2021-12-11|hriw_a1_3v1|                N|1549756803|\n|  33|    2021-12-12|    2022-05-04|hriw_a1_3v2|                N|1639267201|\n|  33|    2022-05-05|    9999-12-31|hriw_a1_3v3|                Y|1651708802|\n|  44|    2019-02-11|    2021-12-10|       null|                N|1549843203|\n|  44|    2021-12-11|    2022-05-03|hriw_a1_4v1|                N|1639180801|\n|  44|    2022-05-04|    2022-05-05|       null|                N|1651622402|\n|  44|    2022-05-06|    9999-12-31|hriw_a1_4v2|                N|1651795203|\n|  55|    2021-12-10|    2021-12-10|hriw_a1_5v3|                N|1639094403|\n|  55|    2021-12-11|    2022-02-20|hriw_a1_5v4|                N|1639180801|\n|  55|    2022-02-21|    9999-12-31|hriw_a1_5v5|                N|1645401602|\n|  66|    2018-06-24|    2018-10-07|hriw_a1_6v1|                N|1529798403|\n|  66|    2018-10-08|    2018-11-10|hriw_a1_6v1|                N|1529798403|\n|  66|    2018-11-11|    2019-04-01|hriw_a1_6v1|                N|1529798403|\n|  66|    2019-04-02|    2019-07-13|hriw_a1_6v1|                N|1529798403|\n|  66|    2019-07-14|    2021-10-14|       null|                Y|1563062401|\n|  66|    2021-10-15|    2021-11-23|hriw_a1_6v2|                N|1634256002|\n|  66|    2021-11-24|    2021-12-11|       null|                Y|1637712003|\n|  66|    2021-12-12|    2022-02-21|       null|             null|      null|\n|  66|    2022-02-22|    2022-10-09|       null|             null|      null|\n|  66|    2022-10-10|    9999-12-31|       null|             null|      null|\n+----+--------------+--------------+-----------+-----------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=27",
              "$$hashKey": "object:1903"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=29",
              "$$hashKey": "object:1904"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=31",
              "$$hashKey": "object:1905"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657707081637_1705576438",
      "id": "paragraph_1657707081637_1705576438",
      "dateCreated": "2022-07-13T10:11:21+0000",
      "dateStarted": "2022-08-03T12:26:09+0000",
      "dateFinished": "2022-08-03T12:26:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:202"
    },
    {
      "text": "%spark\nval range_hriw_odm_join = range_hriw_join.as(\"hriw\")\n   .join(\n       odmSourceDF.as(\"odm\"),\n       \n       odmSourceDF(\"cnum\")===range_hriw_join(\"cnum\") \n       && odmSourceDF(\"eff_date\")<=range_hriw_join(\"range_exp_date\") \n       && odmSourceDF(\"exp_date\")>=range_hriw_join(\"range_eff_date\"), \n       \"left\"\n    )\n\n   .withColumn(\"etl_ts\", greatest(col(\"hriw.ts\"), col(\"odm.ts\")))\n\n   .withColumn(\"delete_indicator\",\n        when(col(\"odm.deleted_indicator\").isNull, col(\"hriw.deleted_indicator\"))\n            .otherwise(col(\"odm.deleted_indicator\"))\n        )\n\n    .select(col(\"hriw.cnum\"),\n            col(\"hriw.range_eff_date\"), \n            col(\"hriw.range_exp_date\"), \n            col(\"hriw_attr1\"),\n            col(\"odm_attr1\"),\n            col(\"delete_indicator\"),\n            col(\"etl_ts\")\n        )",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mrange_hriw_odm_join\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, range_eff_date: date ... 5 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657573518145_1869910020",
      "id": "20220615-084015_1764258886",
      "dateCreated": "2022-07-11T21:05:18+0000",
      "dateStarted": "2022-08-03T12:26:16+0000",
      "dateFinished": "2022-08-03T12:26:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:203"
    },
    {
      "text": "%spark\nprintln(\"number of records: \"+range_hriw_odm_join.count)\nrange_hriw_odm_join.show(range_hriw_odm_join.count.toInt)",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "number of records: 33\n+----+--------------+--------------+-----------+----------+----------------+----------+\n|cnum|range_eff_date|range_exp_date| hriw_attr1| odm_attr1|delete_indicator|    etl_ts|\n+----+--------------+--------------+-----------+----------+----------------+----------+\n|  11|    2021-12-10|    2021-12-14|hriw_a1_1v1|      null|               N|1639094401|\n|  11|    2021-12-15|    2021-12-31|hriw_a1_1v1|odm_a1_1v1|               N|1639526401|\n|  11|    2022-01-01|    2022-01-05|hriw_a1_1v2|odm_a1_1v1|               N|1640995202|\n|  11|    2022-01-06|    2022-01-08|hriw_a1_1v2|odm_a1_1v2|               N|1641427202|\n|  11|    2022-01-09|    2022-02-20|hriw_a1_1v2|odm_a1_1v3|               N|1641686403|\n|  11|    2022-02-21|    9999-12-31|hriw_a1_1v3|odm_a1_1v3|               N|1645401603|\n|  22|    2021-12-15|    2021-12-19|hriw_a1_2v1|      null|               N|1639526401|\n|  22|    2021-12-20|    2022-03-02|hriw_a1_2v1|odm_a1_2v1|               N|1639958401|\n|  22|    2022-03-03|    2022-04-03|hriw_a1_2v1|odm_a1_2v2|               N|1646265602|\n|  22|    2022-04-04|    9999-12-31|hriw_a1_2v2|odm_a1_2v2|               N|1649030402|\n|  55|    2021-12-10|    2021-12-10|hriw_a1_5v3|odm_a1_5v2|               N|1639094403|\n|  55|    2021-12-11|    2022-02-20|hriw_a1_5v4|odm_a1_5v2|               N|1639180801|\n|  55|    2022-02-21|    9999-12-31|hriw_a1_5v5|odm_a1_5v3|               N|1645401602|\n|  44|    2019-02-11|    2021-12-10|       null|odm_a1_4v1|               N|1549843203|\n|  44|    2021-12-11|    2022-05-03|hriw_a1_4v1|      null|               N|1639180801|\n|  44|    2022-05-04|    2022-05-05|       null|      null|               N|1651622402|\n|  44|    2022-05-06|    9999-12-31|hriw_a1_4v2|      null|               N|1651795203|\n|  33|    2019-01-01|    2019-02-09|       null|odm_a1_3v1|               N|1546300803|\n|  33|    2019-02-10|    2019-10-09|hriw_a1_3v1|odm_a1_3v1|               N|1549756803|\n|  33|    2019-10-10|    2021-03-21|hriw_a1_3v1|odm_a1_3v2|               N|1570665601|\n|  33|    2021-03-22|    2021-12-11|hriw_a1_3v1|odm_a1_3v3|               N|1616371202|\n|  33|    2021-12-12|    2022-05-04|hriw_a1_3v2|odm_a1_3v3|               N|1639267201|\n|  33|    2022-05-05|    9999-12-31|hriw_a1_3v3|odm_a1_3v3|               N|1651708802|\n|  66|    2018-06-24|    2018-10-07|hriw_a1_6v1|      null|               N|1529798403|\n|  66|    2018-10-08|    2018-11-10|hriw_a1_6v1|odm_a1_6v1|               N|1538956802|\n|  66|    2018-11-11|    2019-04-01|hriw_a1_6v1|odm_a1_6v2|               Y|1541894403|\n|  66|    2019-04-02|    2019-07-13|hriw_a1_6v1|odm_a1_6v3|               N|1554163201|\n|  66|    2019-07-14|    2021-10-14|       null|odm_a1_6v3|               N|1563062401|\n|  66|    2021-10-15|    2021-11-23|hriw_a1_6v2|odm_a1_6v3|               N|1634256002|\n|  66|    2021-11-24|    2021-12-11|       null|odm_a1_6v3|               N|1637712003|\n|  66|    2021-12-12|    2022-02-21|       null|odm_a1_6v4|               N|1639267202|\n|  66|    2022-02-22|    2022-10-09|       null|odm_a1_6v5|               N|1645488003|\n|  66|    2022-10-10|    9999-12-31|       null|odm_a1_6v6|               Y|1665360001|\n+----+--------------+--------------+-----------+----------+----------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=34",
              "$$hashKey": "object:1930"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=37",
              "$$hashKey": "object:1931"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=40",
              "$$hashKey": "object:1932"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=41",
              "$$hashKey": "object:1933"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=42",
              "$$hashKey": "object:1934"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=43",
              "$$hashKey": "object:1935"
            },
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=44",
              "$$hashKey": "object:1936"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1657707046623_1519586128",
      "id": "paragraph_1657707046623_1519586128",
      "dateCreated": "2022-07-13T10:10:46+0000",
      "dateStarted": "2022-08-03T12:26:16+0000",
      "dateFinished": "2022-08-03T12:26:23+0000",
      "status": "FINISHED",
      "$$hashKey": "object:204"
    },
    {
      "text": "%md\n# Data generation",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T11:57:53+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Data generation</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658680550411_1490640768",
      "id": "paragraph_1658680550411_1490640768",
      "dateCreated": "2022-07-24T16:35:50+0000",
      "dateStarted": "2022-08-15T11:57:53+0000",
      "dateFinished": "2022-08-15T11:57:54+0000",
      "status": "FINISHED",
      "$$hashKey": "object:205"
    },
    {
      "title": "generator function",
      "text": "%spark\ndef generateData(\n    size: Int, \n    attributesNumber: Int,\n    forEachCnum: Int,\n    timeStart: Int,\n    timeEnd: Int,\n    w: WindowSpec\n    ): DataFrame = {\n    \n    // generate column of random timestamps with specified size\n    var df = Seq.fill(size){timeStart + Random.nextInt(timeEnd-timeStart)}.toDF(\"etl_ts\")\n    \n    // generate attribute names in specified amount\n    val attributes = ('a' to 'l').combinations(3).slice(0, attributesNumber).map(_.mkString).toList\n    \n    // produce 'Y' in 'deleted_indicator' column only in approximately 6.7% of records\n    def deleted = udf(() => if (Random.nextInt(15) == 1) \"Y\" else \"N\")\n    \n    // generate approximately 'size/forEachCnum' unique 'cnum' indexes\n    val cnum = udf(() => Random.nextInt(size/forEachCnum))\n    \n    // generate attribute value based on current 'cnum' and name of attribute\n    val attr = udf((cnum: Int, name: String) => {name+\"_\"+cnum%10+\"v\"+Random.nextInt(forEachCnum/2)})\n    \n    df = df\n        .withColumn(\"cnum\", cnum())\n        .withColumn(\"delete_indicator\", deleted())\n        .withColumn(\"range_eff_date\", to_date(from_unixtime($\"etl_ts\")))\n        .withColumn(\"range_exp_date\", date_sub(lead(\"range_eff_date\", 1).over(w), 1))\n        .withColumn(\"range_exp_date\", when(col(\"range_exp_date\").isNull, Date.valueOf(\"9999-12-31\")).otherwise($\"range_exp_date\"))\n    \n    for (attrName <- attributes){\n        df = df.withColumn(attrName, attr($\"cnum\", lit(attrName)))\n    }\n    \n    df = df.select(\n            (List(\"cnum\", \"range_eff_date\", \"range_exp_date\", \"delete_indicator\", \"etl_ts\") ++ attributes)\n            .map(col(_))\n            :_*\n        )\n        // .orderBy(\"cnum\", \"range_eff_date\")\n    df\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:55:24+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "tableHide": true,
        "editorHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mgenerateData\u001b[0m: \u001b[1m\u001b[32m(size: Int, attributesNumber: Int, forEachCnum: Int, timeStart: Int, timeEnd: Int, w: org.apache.spark.sql.expressions.WindowSpec)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658706700183_490940737",
      "id": "paragraph_1658706700183_490940737",
      "dateCreated": "2022-07-24T23:51:40+0000",
      "dateStarted": "2022-08-10T22:02:14+0000",
      "dateFinished": "2022-08-10T22:02:14+0000",
      "status": "FINISHED",
      "$$hashKey": "object:206"
    },
    {
      "title": "generate and save auto",
      "text": "%spark\nval rowsList = List(1000, 10000, 100000, 200000)\nval attrsList = List(5, 25, 50, 100)\n\nval forEachCnum = 10\nval timeStart = 1540000000\nval timeEnd = 1660000000\nval w = Window.partitionBy(\"cnum\").orderBy(\"range_eff_date\")\n\nfor (rows <- rowsList; attrs <- attrsList) {\n    val fileName = s\"/notebook/data/generated_${rows/1000}k_${attrs}.csv\"\n    println(s\"generating $fileName\")\n    \n    generateData(rows, attrs, forEachCnum, timeStart, timeEnd, w)\n        .write.option(\"header\", true).csv(fileName)\n}\n// 200k rows with 100 or 50 attributes data generation can be unstable and crush with no memory error\n// manual generation can be used in such case",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:55:27+0000",
      "progress": 100,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660168303449_785400539",
      "id": "paragraph_1660168303449_785400539",
      "dateCreated": "2022-08-10T21:51:43+0000",
      "dateStarted": "2022-08-10T23:01:14+0000",
      "dateFinished": "2022-08-10T23:08:36+0000",
      "status": "ERROR",
      "$$hashKey": "object:207"
    },
    {
      "title": "generate and save manual",
      "text": "// run of this cell is disabled, use ctrl+alt+R to enable\n%spark\n// settings\n    val size = 200000\n    val attributesNumber = 50\n    \n    val forEachCnum = 10\n    val timeStart = 1540000000\n    val timeEnd = 1660000000\n    val w = Window.partitionBy(\"cnum\").orderBy(\"range_eff_date\")\n\nval dfGenerated = generateData(size, attributesNumber, forEachCnum, timeStart, timeEnd, w)\nval fileName = s\"/notebook/data/generated_${size/1000}k_${attributesNumber}.csv\"\ndfGenerated.write.option(\"header\", true).csv(fileName)",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:55:29+0000",
      "progress": 100,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": false,
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34msize\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 200000\n\u001b[1m\u001b[34mattributesNumber\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 50\n\u001b[1m\u001b[34mforEachCnum\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 10\n\u001b[1m\u001b[34mtimeStart\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 1540000000\n\u001b[1m\u001b[34mtimeEnd\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 1660000000\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@3108189b\n\u001b[1m\u001b[34mdfGenerated\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: int, range_eff_date: date ... 53 more fields]\n\u001b[1m\u001b[34mfileName\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /notebook/data/generated_200k_50.csv\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://21a1466ab874:4040/jobs/job?id=260",
              "$$hashKey": "object:1987"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658796710990_863453074",
      "id": "paragraph_1658796710990_863453074",
      "dateCreated": "2022-07-26T00:51:50+0000",
      "dateStarted": "2022-08-11T17:28:50+0000",
      "dateFinished": "2022-08-11T17:29:28+0000",
      "status": "FINISHED",
      "$$hashKey": "object:208"
    },
    {
      "text": "%md\n# ChangeType implementation",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:28:28+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>ChangeType implementation</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658442530182_460595914",
      "id": "paragraph_1658442530182_460595914",
      "dateCreated": "2022-07-21T22:28:50+0000",
      "dateStarted": "2022-08-22T12:28:28+0000",
      "dateFinished": "2022-08-22T12:28:28+0000",
      "status": "FINISHED",
      "$$hashKey": "object:209"
    },
    {
      "title": "changeType with chunks",
      "text": "%spark\ndef changeTypeChunk(\n    df: DataFrame,\n    colExcluded: List[String],\n    w: WindowSpec,\n    attrChunkSize: Int\n    ): DataFrame = {\n\n    // columns to calculate changes in\n    val columns = df.columns.filterNot(colExcluded.contains(_)).toList\n    \n    // split all columns into chunks with 'attrChunkSize' columns in each (except last one)\n    // List(abc, abd, abe, abf, abg, abh, abi, abj, abk, abl) ===> List(List(abc, abd, abe), List(abf, abg, abh), List(abi, abj, abk), List(abl))\n    val attributeChunks = columns.grouped(attrChunkSize).toList\n    \n    // add dummy changed_type column\n    var result = df.withColumn(\"changed_type\", lit(null)).repartition(col(\"cnum\")) //does repartition help?\n    \n    // Concatenate all columns row wise with coma as separator.\n    // +--------------------+*+--------------------+        +--------------------+\n    // |hriw_attr1_changed  |*|changed_type        |        |changed_type        |\n    // +--------------------+*+--------------------+        +--------------------+\n    // |null                |*|null                |        |                    |\n    // |hriw_attr1          |*|null                |        |hriw_attr1          |\n    // |hriw_attr1          |*|odm_attr1           |  ===>  |hriw_attr1,odm_attr1|\n    // |null                |*|odm_attr1           |        |odm_attr1           |\n    // *********************************************        **********************\n    // |hriw_attr1          |*|null                |        |hriw_attr1          |\n    // +--------------------+*+--------------------+        +--------------------+\n    def getChanged(columns: List[String]): Column = {\n        var changes = columns.map(_+\"_changed\") ++ List(\"changed_type\")\n        concat_ws(\",\", changes.map(col(_)):_*)\n    }\n    \n    // iterate over chunks of columns\n    attributeChunks.foreach((chunk) => {\n        \n        // and for each column in chunk do the following\n        chunk.foreach((column) => {\n            \n        // Map every row to name of an attribute, which has been changed compared with previous row, for every attribute.\n        // +-----------+        +------------------+       +-----------------+\n        // |hriw_attr1 |        |hriw_attr1_changed|       |odm_attr1_changed|\n        // +-----------+        +------------------+       +-----------------+\n        // |null       |        |false             |       |null             |\n        // |hriw_a1_1v1|  ===>  |true              | ===>  |hriw_attr1       |\n        // |hriw_a1_1v2|        |true              |       |hriw_attr1       |\n        // |hriw_a1_1v2|        |false             |       |null             |\n        // *************        ********************       *******************\n        // |hriw_a1_1v3|        |true              |       |hriw_attr1       |\n        // +-----------+        +------------------+       +-----------------+\n            result = result\n                .withColumn(\n                    column+\"_changed\",\n                    when(\n                        (lag(column, 1).over(w)!==col(column)) || \n                        (lag(column, 1).over(w).isNull && col(column).isNotNull) || \n                        (lag(column, 1).over(w).isNotNull && col(column).isNull),\n                        column\n                    )\n                )\n        })\n        \n        result = result\n            // concatenate all '*_changed' columns (which are based on attribute columns in current chunk) with 'changed_type' column\n            .withColumn(\"changed_type\", getChanged(chunk))\n        // result.orderBy(\"etl_ts\").drop(\"cnum\", \"range_eff_date\", \"range_exp_date\", \"delete_indicator\").show(5)\n            // drop all temporary '*_changed' columns used in current chunk\n            .drop(chunk.map(_+\"_changed\"):_*)\n        result.take(1)\n        // result.cache()\n    })\n\n    result\n        // mark start of every partition as 'new'\n        .withColumn(\"changed_type\", when(row_number().over(w)===1, \"new\").otherwise($\"changed_type\")) // try to use min(ts).over(w)===ts\n        \n        // overwrite any value with 'deleted' if this row has 'delete_indicator==Y' and it's last in a partition, 'false_deleted' if it isn't last in the partition\n        .withColumn(\"changed_type\",\n            when(\n                $\"delete_indicator\"===\"Y\",\n                when(\n                    lead(\"delete_indicator\", 1).over(w).isNull, \n                    \"deleted\"\n                )\n                .otherwise(\"false_deleted\")\n            )\n            .otherwise($\"changed_type\")\n        )\n        \n        // mark as 'renew' if record was deleted on previous row\n        .withColumn(\"changed_type\", when(lag(\"delete_indicator\", 1).over(w)===\"Y\", \"renew\").otherwise($\"changed_type\"))\n        \n        // eff_date==exp_date if record has positive deletion indicator and it's last in a partition\n        .withColumn(\"range_exp_date\",\n            when(\n                $\"delete_indicator\"===\"Y\" && lead(\"delete_indicator\", 1).over(w).isNull, \n                $\"range_eff_date\"\n            )\n            .otherwise($\"range_exp_date\")\n        )\n        \n        .drop(\"delete_indicator\")\n        // .drop(columns:_*)\n        // .orderBy(\"cnum\", \"range_eff_date\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:20:30+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 428,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "tableHide": true,
        "lineNumbers": false,
        "editorHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[33mwarning: \u001b[0mthere was one deprecation warning (since 2.0.0); for details, enable `:setting -deprecation' or `:replay -deprecation'\n\u001b[1m\u001b[34mchangeTypeChunk\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, colExcluded: List[String], w: org.apache.spark.sql.expressions.WindowSpec, attrChunkSize: Int)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658399103081_502439954",
      "id": "paragraph_1658399103081_502439954",
      "dateCreated": "2022-07-21T10:25:03+0000",
      "dateStarted": "2022-08-22T19:20:30+0000",
      "dateFinished": "2022-08-22T19:20:30+0000",
      "status": "FINISHED",
      "$$hashKey": "object:210"
    },
    {
      "title": "changeType with chunks prev value",
      "text": "%spark\ndef changeTypeChunkPrevVal(\n    df: DataFrame, \n    colExcluded: List[String],\n    w: WindowSpec,\n    attrChunkSize: Int\n    ): DataFrame = {\n\n    // columns to calculate changes in\n    val columns = df.columns.filterNot(colExcluded.contains(_)).toList\n    \n    // split all columns into chunks with 'attrChunkSize' columns in each (except last one)\n    // List(abc, abd, abe, abf, abg, abh, abi, abj, abk, abl) ===> List(List(abc, abd, abe), List(abf, abg, abh), List(abi, abj, abk), List(abl))\n    val attributeChunks = columns.grouped(attrChunkSize).toList\n    \n    // add dummy changed_type column\n    // var result = df\n    var result = df.withColumn(\"changed_type\", lit(null)).repartition(col(\"cnum\")) //does repartition help?\n    \n    // Concatenate all columns row wise with coma as separator.\n    // +--------------------+*+--------------------+        +--------------------+\n    // |hriw_attr1_changed  |*|changed_type        |        |changed_type        |\n    // +--------------------+*+--------------------+        +--------------------+\n    // |null                |*|null                |        |                    |\n    // |hriw_attr1          |*|null                |        |hriw_attr1          |\n    // |hriw_attr1          |*|odm_attr1           |  ===>  |hriw_attr1,odm_attr1|\n    // |null                |*|odm_attr1           |        |odm_attr1           |\n    // *********************************************        **********************\n    // |hriw_attr1          |*|null                |        |hriw_attr1          |\n    // +--------------------+*+--------------------+        +--------------------+\n    def getChanged(columns: List[String]): Column = {\n        var changes = columns.map(_+\"_changed\") ++ List(\"changed_type\")\n        concat_ws(\",\", changes.map(col(_)):_*)\n    }\n    \n    // iterate over chunks of columns\n    attributeChunks.foreach((chunk) => {\n        \n        // and for each column in chunk do the following\n        chunk.foreach((column) => {\n            \n        // Map every row to name of an attribute, which has been changed compared with previous row, for every attribute.\n        // +-----------+        +------------------+       +-----------------+\n        // |hriw_attr1 |        |hriw_attr1_changed|       |odm_attr1_changed|\n        // +-----------+        +------------------+       +-----------------+\n        // |null       |        |false             |       |null             |\n        // |hriw_a1_1v1|  ===>  |true              | ===>  |hriw_attr1       |\n        // |hriw_a1_1v2|        |true              |       |hriw_attr1       |\n        // |hriw_a1_1v2|        |false             |       |null             |\n        // *************        ********************       *******************\n        // |hriw_a1_1v3|        |true              |       |hriw_attr1       |\n        // +-----------+        +------------------+       +-----------------+\n            result = result\n                .withColumn(\"prevValue\", lag(column, 1).over(w))\n                .withColumn(\n                    column+\"_changed\",\n                    when(\n                        (col(\"prevValue\")!==col(column)) || \n                        (col(\"prevValue\").isNull && col(column).isNotNull) || \n                        (col(\"prevValue\").isNotNull && col(column).isNull),\n                        column\n                    )\n                )\n        })\n        \n        result = result\n            // concatenate all '*_changed' columns (which are based on attribute columns in current chunk) with 'changed_type' column\n            .withColumn(\"changed_type\", getChanged(chunk))\n        // result.orderBy(\"etl_ts\").drop(\"cnum\", \"range_eff_date\", \"range_exp_date\", \"delete_indicator\").show(5)\n            // drop all temporary '*_changed' columns used in current chunk\n            .drop(chunk.map(_+\"_changed\"):_*)\n        // result.take(1)\n        // result.cache()\n    })\n\n    result\n        // mark start of every partition as 'new'\n        .withColumn(\"changed_type\", when(row_number().over(w)===1, \"new\").otherwise($\"changed_type\")) // try to use min(ts).over(w)===ts\n        \n        // overwrite any value with 'deleted' if this row has 'delete_indicator==Y' and it's last in a partition, 'false_deleted' if it isn't last in the partition\n        .withColumn(\"changed_type\",\n            when(\n                $\"delete_indicator\"===\"Y\",\n                when(\n                    lead(\"delete_indicator\", 1).over(w).isNull, \n                    \"deleted\"\n                )\n                .otherwise(\"false_deleted\")\n            )\n            .otherwise($\"changed_type\")\n        )\n        \n        // mark as 'renew' if record was deleted on previous row\n        .withColumn(\"changed_type\", when(lag(\"delete_indicator\", 1).over(w)===\"Y\", \"renew\").otherwise($\"changed_type\"))\n        \n        // eff_date==exp_date if record has positive deletion indicator and it's last in a partition\n        .withColumn(\"range_exp_date\",\n            when(\n                $\"delete_indicator\"===\"Y\" && lead(\"delete_indicator\", 1).over(w).isNull, \n                $\"range_eff_date\"\n            )\n            .otherwise($\"range_exp_date\")\n        )\n        \n        .drop(\"delete_indicator\")\n        .drop(\"prevValue\")\n        // .drop(columns:_*)\n        // .orderBy(\"cnum\", \"range_eff_date\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:20:24+0000",
      "progress": 0,
      "config": {
        "lineNumbers": false,
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": true,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 428,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[33mwarning: \u001b[0mthere was one deprecation warning (since 2.0.0); for details, enable `:setting -deprecation' or `:replay -deprecation'\n\u001b[1m\u001b[34mchangeTypeChunkPrevVal\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, colExcluded: List[String], w: org.apache.spark.sql.expressions.WindowSpec, attrChunkSize: Int)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660725056703_1855419606",
      "id": "paragraph_1660725056703_1855419606",
      "dateCreated": "2022-08-17T08:30:56+0000",
      "dateStarted": "2022-08-22T19:20:24+0000",
      "dateFinished": "2022-08-22T19:20:26+0000",
      "status": "FINISHED",
      "$$hashKey": "object:211"
    },
    {
      "title": "changeType inplace",
      "text": "%spark\ndef changeTypeInplace(\n    df: DataFrame,\n    colExcluded: List[String],\n    w: WindowSpec\n    ): DataFrame = {\n\n    var result = df.repartition(col(\"cnum\")) //does repartition help?\n    val columns = df.columns.filterNot(colExcluded.contains(_)).toList\n    // val select = List(\"original.cnum\", \"original.range_eff_date\", \"original.range_exp_date\", \"original.etl_ts\", \"original.delete_indicator\", \"changed_type\") ++ columns\n    \n    columns.foreach((column) => {\n        \n        result = result\n            .withColumn(\n                column,\n                when(\n                    (lag(column, 1).over(w)!==col(column)) || \n                    (lag(column, 1).over(w).isNull && col(column).isNotNull) || \n                    (lag(column, 1).over(w).isNotNull && col(column).isNull),\n                    column\n                )\n            )\n    })\n\n    result\n        .withColumn(\"changed_type\", concat_ws(\",\", columns.map(col(_)):_*))\n        .drop(columns:_*)\n        \n        .withColumn(\"changed_type\", when(row_number().over(w)===1, \"new\").otherwise($\"changed_type\"))\n        \n        .withColumn(\"changed_type\",\n            when(\n                $\"delete_indicator\"===\"Y\",\n                when(\n                    lead(\"delete_indicator\", 1).over(w).isNull, \n                    \"deleted\"\n                )\n                .otherwise(\"false_deleted\")\n            )\n            .otherwise($\"changed_type\")\n        )\n        \n        .withColumn(\"changed_type\", when(lag(\"delete_indicator\", 1).over(w)===\"Y\", \"renew\").otherwise($\"changed_type\"))\n        \n        .withColumn(\"range_exp_date\",\n            when(\n                $\"delete_indicator\"===\"Y\" && lead(\"delete_indicator\", 1).over(w).isNull, \n                $\"range_eff_date\"\n            )\n            .otherwise($\"range_exp_date\")\n        )\n    \n    // // join all replaced attributes columns from original DataFrame\n    // result.as(\"changed\")\n    //     .join(\n    //         df.as(\"original\"),\n    //         result(\"cnum\") === df(\"cnum\") && result(\"etl_ts\") === df(\"etl_ts\")\n    //     )\n    //     // select all necessary columns\n    //     .select(select.map(col(_)):_*)\n        \n        // .drop(\"delete_indicator\")\n        // .orderBy(\"cnum\", \"range_eff_date\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T21:18:04+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[33mwarning: \u001b[0mthere was one deprecation warning (since 2.0.0); for details, enable `:setting -deprecation' or `:replay -deprecation'\n\u001b[1m\u001b[34mchangeTypeInplace\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, colExcluded: List[String], w: org.apache.spark.sql.expressions.WindowSpec)org.apache.spark.sql.DataFrame\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659566316111_2703228",
      "id": "paragraph_1659566316111_2703228",
      "dateCreated": "2022-08-03T22:38:36+0000",
      "dateStarted": "2022-08-22T13:47:37+0000",
      "dateFinished": "2022-08-22T13:47:37+0000",
      "status": "FINISHED",
      "$$hashKey": "object:212"
    },
    {
      "text": "%md\n### Optimization ideas\nDo not mix different transformations. Try to execute one thing at once. (calculate all changes before concat_ws them all)\nCache intermidiate data because it could be recalculated every time from the start.\nInspect window functions perfomance. Try to replace them with some workaround.\nContinue learning about Spark execution plans in Spark UI and shuffle operation.\nDo not try to invent a wheel with UDF.\nAvoid operation with shuffle under the hood (join, groupby).\nI don't see any partition manipulation perfomance impact.",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:18+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Optimization ideas</h3>\n<p>Do not mix different transformations. Try to execute one thing at once. (calculate all changes before concat_ws them all)</p>\n<p>Cache intermidiate data (try to cache &lsquo;change_type&rsquo; because it could be recalculated every time from the start).<br />\nRemove all attrubites not engaged in change_type calculation (&lsquo;ts&rsquo; only?).<br />\nLearn more &rsquo;bout Spark execution plans.<br />\nCheck execution process in Spark UI.</p>\n<h4>satisfied</h4>\n<p>Do not try to invent a wheel with UDF.<br />\nAvoid operation with shuffle under the hood (join, groupby).</p>\n<h3>Questions</h3>\n<p>10 columns in chunk = 1 hour for everything to porcess or just for one chunk?<br />\nвопросы по spark ui, почему часто именно по 200 тасков в стейджах?</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659479115304_1353363243",
      "id": "paragraph_1659479115304_1353363243",
      "dateCreated": "2022-08-02T22:25:15+0000",
      "dateStarted": "2022-08-04T22:34:54+0000",
      "dateFinished": "2022-08-04T22:34:54+0000",
      "status": "FINISHED",
      "$$hashKey": "object:213"
    },
    {
      "text": "%md\n# Testing",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T11:18:13+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Testing</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658799358289_2092151304",
      "id": "paragraph_1658799358289_2092151304",
      "dateCreated": "2022-07-26T01:35:58+0000",
      "dateStarted": "2022-08-22T11:18:13+0000",
      "dateFinished": "2022-08-22T11:18:13+0000",
      "status": "FINISHED",
      "$$hashKey": "object:214"
    },
    {
      "text": "%md\n### 1. \"real\" data from csv (just to check the logic is right)",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T11:18:19+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>1. &ldquo;real&rdquo; data from csv (just to check the logic is right)</h3>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659700146298_1416833495",
      "id": "paragraph_1659700146298_1416833495",
      "dateCreated": "2022-08-05T11:49:06+0000",
      "dateStarted": "2022-08-22T11:18:19+0000",
      "dateFinished": "2022-08-22T11:18:19+0000",
      "status": "FINISHED",
      "$$hashKey": "object:215"
    },
    {
      "text": "%spark\nval hriw_odm = spark.read.option(\"header\", true).csv(\"/notebook/data/hriw_odm.csv\")\nhriw_odm.cache()",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T10:21:36+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 0.0 failed 4 times, most recent failure: Lost task 0.3 in stage 0.0 (TID 3) (172.25.0.4 executor 0): java.io.FileNotFoundException: File file:/notebook/data/hriw_odm.csv/part-00178-80fdae37-ab84-43b7-a250-39c472affcdf-c000.csv does not exist\nIt is possible the underlying files have been updated. You can explicitly invalidate the cache in Spark by running 'REFRESH TABLE tableName' command in SQL or by recreating the Dataset/DataFrame involved.\n\tat org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)\n\tat org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:169)\n\tat org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:93)\n\tat scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:458)\n\tat org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIteratorForCodegenStage1.processNext(Unknown Source)\n\tat org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)\n\tat org.apache.spark.sql.execution.WholeStageCodegenExec$$anon$1.hasNext(WholeStageCodegenExec.scala:755)\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$getByteArrayRdd$1(SparkPlan.scala:345)\n\tat org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2(RDD.scala:898)\n\tat org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2$adapted(RDD.scala:898)\n\tat org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:373)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:337)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:131)\n\tat org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:498)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1439)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:501)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:750)\n\nDriver stacktrace:\n  at org.apache.spark.scheduler.DAGScheduler.failJobAndIndependentStages(DAGScheduler.scala:2303)\n  at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2(DAGScheduler.scala:2252)\n  at org.apache.spark.scheduler.DAGScheduler.$anonfun$abortStage$2$adapted(DAGScheduler.scala:2251)\n  at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)\n  at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)\n  at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)\n  at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:2251)\n  at org.apache.spark.scheduler.DAGScheduler.$anonfun$handleTaskSetFailed$1(DAGScheduler.scala:1124)\n  at org.apache.spark.scheduler.DAGScheduler.$anonfun$handleTaskSetFailed$1$adapted(DAGScheduler.scala:1124)\n  at scala.Option.foreach(Option.scala:407)\n  at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:1124)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2490)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2432)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2421)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:902)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2196)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2217)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2236)\n  at org.apache.spark.sql.execution.SparkPlan.executeTake(SparkPlan.scala:472)\n  at org.apache.spark.sql.execution.SparkPlan.executeTake(SparkPlan.scala:425)\n  at org.apache.spark.sql.execution.CollectLimitExec.executeCollect(limit.scala:47)\n  at org.apache.spark.sql.Dataset.collectFromPlan(Dataset.scala:3709)\n  at org.apache.spark.sql.Dataset.$anonfun$head$1(Dataset.scala:2735)\n  at org.apache.spark.sql.Dataset.$anonfun$withAction$1(Dataset.scala:3700)\n  at org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$5(SQLExecution.scala:103)\n  at org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:163)\n  at org.apache.spark.sql.execution.SQLExecution$.$anonfun$withNewExecutionId$1(SQLExecution.scala:90)\n  at org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:775)\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:64)\n  at org.apache.spark.sql.Dataset.withAction(Dataset.scala:3698)\n  at org.apache.spark.sql.Dataset.head(Dataset.scala:2735)\n  at org.apache.spark.sql.Dataset.take(Dataset.scala:2942)\n  at org.apache.spark.sql.execution.datasources.csv.TextInputCSVDataSource$.infer(CSVDataSource.scala:112)\n  at org.apache.spark.sql.execution.datasources.csv.CSVDataSource.inferSchema(CSVDataSource.scala:65)\n  at org.apache.spark.sql.execution.datasources.csv.CSVFileFormat.inferSchema(CSVFileFormat.scala:62)\n  at org.apache.spark.sql.execution.datasources.DataSource.$anonfun$getOrInferFileFormatSchema$11(DataSource.scala:209)\n  at scala.Option.orElse(Option.scala:447)\n  at org.apache.spark.sql.execution.datasources.DataSource.getOrInferFileFormatSchema(DataSource.scala:206)\n  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:419)\n  at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:325)\n  at org.apache.spark.sql.DataFrameReader.$anonfun$load$3(DataFrameReader.scala:307)\n  at scala.Option.getOrElse(Option.scala:189)\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:307)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:795)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:595)\n  ... 56 elided\nCaused by: java.io.FileNotFoundException: File file:/notebook/data/hriw_odm.csv/part-00178-80fdae37-ab84-43b7-a250-39c472affcdf-c000.csv does not exist\nIt is possible the underlying files have been updated. You can explicitly invalidate the cache in Spark by running 'REFRESH TABLE tableName' command in SQL or by recreating the Dataset/DataFrame involved.\n  at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.org$apache$spark$sql$execution$datasources$FileScanRDD$$anon$$readCurrentFile(FileScanRDD.scala:124)\n  at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:169)\n  at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:93)\n  at scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:458)\n  at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIteratorForCodegenStage1.processNext(Unknown Source)\n  at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)\n  at org.apache.spark.sql.execution.WholeStageCodegenExec$$anon$1.hasNext(WholeStageCodegenExec.scala:755)\n  at org.apache.spark.sql.execution.SparkPlan.$anonfun$getByteArrayRdd$1(SparkPlan.scala:345)\n  at org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2(RDD.scala:898)\n  at org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2$adapted(RDD.scala:898)\n  at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52)\n  at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:373)\n  at org.apache.spark.rdd.RDD.iterator(RDD.scala:337)\n  at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n  at org.apache.spark.scheduler.Task.run(Task.scala:131)\n  at org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:498)\n  at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1439)\n  at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:501)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n  at java.lang.Thread.run(Thread.java:750)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://39676fe7410d:4040/jobs/job?id=0",
              "$$hashKey": "object:2062"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659658306735_655538367",
      "id": "paragraph_1659658306735_655538367",
      "dateCreated": "2022-08-05T00:11:46+0000",
      "dateStarted": "2022-08-22T10:20:49+0000",
      "dateFinished": "2022-08-22T10:20:59+0000",
      "status": "ERROR",
      "$$hashKey": "object:216"
    },
    {
      "title": "",
      "text": "%spark\n// settings\n    val w = Window.partitionBy(\"cnum\").orderBy(\"range_eff_date\")\n    \n    // columns which won't be used for change calculation\n    val columnsExcluded = List(\"cnum\", \"range_eff_date\", \"eff_date\", \"range_exp_date\", \"exp_date\", \"etl_ts\", \"ts\", \"delete_indicator\")\n\n// generation\nval dfChanged = changeTypeChunkPrevVal(hriw_odm, columnsExcluded, w, 2)\ndfChanged.orderBy(\"cnum\", \"range_eff_date\").show(dfChanged.count.toInt, false)",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T21:10:17+0000",
      "progress": 93,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 306,
              "optionOpen": false
            }
          }
        },
        "enabled": true,
        "title": false,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+--------------+--------------+-----------+----------+----------+--------------------+\n|cnum|range_eff_date|range_exp_date|hriw_attr1 |odm_attr1 |etl_ts    |changed_type        |\n+----+--------------+--------------+-----------+----------+----------+--------------------+\n|11  |2021-12-10    |2021-12-14    |hriw_a1_1v1|null      |1639094401|new                 |\n|11  |2021-12-15    |2021-12-31    |hriw_a1_1v1|odm_a1_1v1|1639526401|odm_attr1           |\n|11  |2022-01-01    |2022-01-05    |hriw_a1_1v2|odm_a1_1v1|1640995202|hriw_attr1          |\n|11  |2022-01-06    |2022-01-08    |hriw_a1_1v2|odm_a1_1v2|1641427202|odm_attr1           |\n|11  |2022-01-09    |2022-02-20    |hriw_a1_1v2|odm_a1_1v3|1641686403|odm_attr1           |\n|11  |2022-02-21    |9999-12-31    |hriw_a1_1v3|odm_a1_1v3|1645401603|hriw_attr1          |\n|22  |2021-12-15    |2021-12-19    |hriw_a1_2v1|null      |1639526401|new                 |\n|22  |2021-12-20    |2022-03-02    |hriw_a1_2v1|odm_a1_2v1|1639958401|odm_attr1           |\n|22  |2022-03-03    |2022-04-03    |hriw_a1_2v1|odm_a1_2v2|1646265602|odm_attr1           |\n|22  |2022-04-04    |9999-12-31    |hriw_a1_2v2|odm_a1_2v2|1649030402|hriw_attr1          |\n|33  |2019-01-01    |2019-02-09    |null       |odm_a1_3v1|1546300803|new                 |\n|33  |2019-02-10    |2019-10-09    |hriw_a1_3v1|odm_a1_3v1|1549756803|hriw_attr1          |\n|33  |2019-10-10    |2021-03-21    |hriw_a1_3v1|odm_a1_3v2|1570665601|odm_attr1           |\n|33  |2021-03-22    |2021-12-11    |hriw_a1_3v1|odm_a1_3v3|1616371202|odm_attr1           |\n|33  |2021-12-12    |2022-05-04    |hriw_a1_3v2|odm_a1_3v3|1639267201|hriw_attr1          |\n|33  |2022-05-05    |9999-12-31    |hriw_a1_3v3|odm_a1_3v3|1651708802|hriw_attr1          |\n|44  |2019-02-11    |2021-12-10    |null       |odm_a1_4v1|1549843203|new                 |\n|44  |2021-12-11    |2022-05-03    |hriw_a1_4v1|null      |1639180801|hriw_attr1,odm_attr1|\n|44  |2022-05-04    |2022-05-05    |null       |null      |1651622402|hriw_attr1          |\n|44  |2022-05-06    |9999-12-31    |hriw_a1_4v2|null      |1651795203|hriw_attr1          |\n|55  |2021-12-10    |2021-12-10    |hriw_a1_5v3|odm_a1_5v2|1639094403|new                 |\n|55  |2021-12-11    |2022-02-20    |hriw_a1_5v4|odm_a1_5v2|1639180801|hriw_attr1          |\n|55  |2022-02-21    |9999-12-31    |hriw_a1_5v5|odm_a1_5v3|1645401602|hriw_attr1,odm_attr1|\n|66  |2018-06-24    |2018-10-07    |hriw_a1_6v1|null      |1529798403|new                 |\n|66  |2018-10-08    |2018-11-10    |hriw_a1_6v1|odm_a1_6v1|1538956802|odm_attr1           |\n|66  |2018-11-11    |2019-04-01    |hriw_a1_6v1|odm_a1_6v2|1541894403|false_deleted       |\n|66  |2019-04-02    |2019-07-13    |hriw_a1_6v1|odm_a1_6v3|1554163201|renew               |\n|66  |2019-07-14    |2021-10-14    |null       |odm_a1_6v3|1563062401|hriw_attr1          |\n|66  |2021-10-15    |2021-11-23    |hriw_a1_6v2|odm_a1_6v3|1634256002|hriw_attr1          |\n|66  |2021-11-24    |2021-12-11    |null       |odm_a1_6v3|1637712003|hriw_attr1          |\n|66  |2021-12-12    |2022-02-21    |null       |odm_a1_6v4|1639267202|odm_attr1           |\n|66  |2022-02-22    |2022-10-09    |null       |odm_a1_6v5|1645488003|odm_attr1           |\n|66  |2022-10-10    |2022-10-10    |null       |odm_a1_6v6|1665360001|deleted             |\n+----+--------------+--------------+-----------+----------+----------+--------------------+\n\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@6f506294\n\u001b[1m\u001b[34mcolumnsExcluded\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(cnum, range_eff_date, eff_date, range_exp_date, exp_date, etl_ts, ts, delete_indicator)\n\u001b[1m\u001b[34mdfChanged\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, range_eff_date: string ... 5 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://eba17cf61408:4040/jobs/job?id=1",
              "$$hashKey": "object:108675"
            },
            {
              "jobUrl": "http://eba17cf61408:4040/jobs/job?id=2",
              "$$hashKey": "object:108676"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658442325093_2099820051",
      "id": "paragraph_1658442325093_2099820051",
      "dateCreated": "2022-07-21T22:25:25+0000",
      "dateStarted": "2022-08-17T16:02:23+0000",
      "dateFinished": "2022-08-17T16:02:30+0000",
      "status": "FINISHED",
      "$$hashKey": "object:217"
    },
    {
      "text": "%md\n### 2. generated data",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:28:22+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>2. generated data</h3>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659700171086_1264244337",
      "id": "paragraph_1659700171086_1264244337",
      "dateCreated": "2022-08-05T11:49:31+0000",
      "dateStarted": "2022-08-22T12:28:22+0000",
      "dateFinished": "2022-08-22T12:28:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:218"
    },
    {
      "title": "test function",
      "text": "%spark\ndef test(\n    df: DataFrame,\n    columnsExcluded: List[String],\n    w: WindowSpec,\n    iterations: Int,\n    mode: String,\n    attrChunkSize: Int = 10\n    ): (Double, Double) = {\n\n    // I hit the wall of static typing when tried to come up with smth nice, so here it is\n    def run(df: DataFrame): Unit = {\n        mode.toLowerCase match{\n            case \"chunk\" => changeTypeChunkPrevVal(df, columnsExcluded, w, attrChunkSize).take(1)\n            // case \"inplace\" => changeTypeInplace(df, columnsExcluded, w).take(1)\n            case _ => throw new IllegalArgumentException(s\"No such mode yet: $mode\")\n        }\n    }\n\n    var timings: List[Long] = List()\n    \n    for(_ <- 1 to iterations){\n        val startTime = System.currentTimeMillis\n        run(df)\n        val endTime = System.currentTimeMillis\n        timings = timings :+ endTime-startTime\n    }\n    \n    // println(timings)\n    \n    val avg = (x: List[Double]) => x.sum/x.length\n    \n    val rnd = (x: Double, signs: Int) => {\n        val n = scala.math.pow(10, signs)\n        scala.math.round(x*n)/n.toDouble\n    }\n    \n    // calculate standard deviation\n    val std = (x: List[Double]) => scala.math.sqrt(x.map(i => scala.math.pow(i-avg(x), 2)).sum/x.length)\n\n    val x = timings.map(_/1000.0) // convert milliseconds to seconds\n    (rnd(avg(x), 3), rnd(std(x), 3))\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:40:15+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mtest\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, columnsExcluded: List[String], w: org.apache.spark.sql.expressions.WindowSpec, iterations: Int, mode: String, attrChunkSize: Int)(Double, Double)\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659904838126_558712984",
      "id": "paragraph_1659904838126_558712984",
      "dateCreated": "2022-08-07T20:40:38+0000",
      "dateStarted": "2022-08-22T19:40:15+0000",
      "dateFinished": "2022-08-22T19:40:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:219"
    },
    {
      "title": "auto test",
      "text": "%spark\nval rowsList = List(1000, 10000, 100000, 200000)\nval attrsList = List(5, 25, 50, 100)\n\nval forEachCnum = 10\nval timeStart = 1540000000\nval timeEnd = 1660000000\nval columnsExcluded = List(\"cnum\", \"range_eff_date\", \"eff_date\", \"range_exp_date\", \"exp_date\", \"etl_ts\", \"ts\", \"delete_indicator\")\nval w = Window.partitionBy(\"cnum\").orderBy(\"range_eff_date\")\n\n// calculates all combinations of values from 'rowsList' and 'attrsList', generates data accordingly and saves it\nval dfs = for (rows <- rowsList; attrs <- attrsList) yield {\n    val fileName = s\"/notebook/data/generated_${rows/1000}k_${attrs}.csv\"\n    println(s\"reading $fileName\")\n    spark.read.option(\"header\", true).csv(fileName)\n}\n\n// conducts tests and packs it in readable format\nval results = for (df <- dfs) yield {\n    val testName = s\"${df.count/1000}k${df.columns.length-5}\"\n    println(s\"testing $testName\")\n    val res = test(df, columnsExcluded, w, 2, \"chunk\", 25)\n    (df.count, df.columns.length-5, res._1, res._2)\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T19:40:21+0000",
      "progress": 77,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 128,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "reading /notebook/data/generated_1k_5.csv\nreading /notebook/data/generated_1k_25.csv\nreading /notebook/data/generated_1k_50.csv\nreading /notebook/data/generated_1k_100.csv\nreading /notebook/data/generated_10k_5.csv\nreading /notebook/data/generated_10k_25.csv\nreading /notebook/data/generated_10k_50.csv\nreading /notebook/data/generated_10k_100.csv\nreading /notebook/data/generated_100k_5.csv\nreading /notebook/data/generated_100k_25.csv\nreading /notebook/data/generated_100k_50.csv\nreading /notebook/data/generated_100k_100.csv\nreading /notebook/data/generated_200k_5.csv\nreading /notebook/data/generated_200k_25.csv\nreading /notebook/data/generated_200k_50.csv\nreading /notebook/data/generated_200k_100.csv\ntesting 1k5\ntesting 1k25\ntesting 1k50\ntesting 1k100\ntesting 10k5\ntesting 10k25\ntesting 10k50\ntesting 10k100\ntesting 100k5\ntesting 100k25\ntesting 100k50\ntesting 100k100\ntesting 200k5\ntesting 200k25\ntesting 200k50\ntesting 200k100\n\u001b[1m\u001b[34mrowsList\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m = List(1000, 10000, 100000, 200000)\n\u001b[1m\u001b[34mattrsList\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m = List(5, 25, 50, 100)\n\u001b[1m\u001b[34mforEachCnum\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 10\n\u001b[1m\u001b[34mtimeStart\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 1540000000\n\u001b[1m\u001b[34mtimeEnd\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 1660000000\n\u001b[1m\u001b[34mcolumnsExcluded\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(cnum, range_eff_date, eff_date, range_exp_date, exp_date, etl_ts, ts, delete_indicator)\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@68647b79\n\u001b[1m\u001b[34mdfs\u001b[0m: \u001b[1m\u001b[32mList[org.apache.spark.sql.DataFrame]\u001b[0m = List([cnum: string, range_eff_date: string ... 8 more fields], [cnum: string, range_eff_date: string ... 28 more fields], [cnum: string, range...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=185",
              "$$hashKey": "object:106826"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=186",
              "$$hashKey": "object:106827"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=187",
              "$$hashKey": "object:106828"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=188",
              "$$hashKey": "object:106829"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=189",
              "$$hashKey": "object:106830"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=190",
              "$$hashKey": "object:106831"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=191",
              "$$hashKey": "object:106832"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=192",
              "$$hashKey": "object:106833"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=193",
              "$$hashKey": "object:106834"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=194",
              "$$hashKey": "object:106835"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=195",
              "$$hashKey": "object:106836"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=196",
              "$$hashKey": "object:106837"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=197",
              "$$hashKey": "object:106838"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=198",
              "$$hashKey": "object:106839"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=199",
              "$$hashKey": "object:106840"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=200",
              "$$hashKey": "object:106841"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=201",
              "$$hashKey": "object:106842"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=202",
              "$$hashKey": "object:106843"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=203",
              "$$hashKey": "object:106844"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=204",
              "$$hashKey": "object:106845"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=205",
              "$$hashKey": "object:106846"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=206",
              "$$hashKey": "object:106847"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=207",
              "$$hashKey": "object:106848"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=208",
              "$$hashKey": "object:106849"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=209",
              "$$hashKey": "object:106850"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=210",
              "$$hashKey": "object:106851"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=211",
              "$$hashKey": "object:106852"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=212",
              "$$hashKey": "object:106853"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=213",
              "$$hashKey": "object:106854"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=214",
              "$$hashKey": "object:106855"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=215",
              "$$hashKey": "object:106856"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=216",
              "$$hashKey": "object:106857"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=217",
              "$$hashKey": "object:106858"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=218",
              "$$hashKey": "object:106859"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=219",
              "$$hashKey": "object:106860"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=220",
              "$$hashKey": "object:106861"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=221",
              "$$hashKey": "object:106862"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=222",
              "$$hashKey": "object:106863"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=223",
              "$$hashKey": "object:106864"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=224",
              "$$hashKey": "object:106865"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=225",
              "$$hashKey": "object:106866"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=226",
              "$$hashKey": "object:106867"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=227",
              "$$hashKey": "object:106868"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=228",
              "$$hashKey": "object:106869"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=229",
              "$$hashKey": "object:106870"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=230",
              "$$hashKey": "object:106871"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=231",
              "$$hashKey": "object:106872"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=232",
              "$$hashKey": "object:106873"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=233",
              "$$hashKey": "object:106874"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=234",
              "$$hashKey": "object:106875"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=235",
              "$$hashKey": "object:106876"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=236",
              "$$hashKey": "object:106877"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=237",
              "$$hashKey": "object:106878"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=238",
              "$$hashKey": "object:106879"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=239",
              "$$hashKey": "object:106880"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=240",
              "$$hashKey": "object:106881"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=241",
              "$$hashKey": "object:106882"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=242",
              "$$hashKey": "object:106883"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=243",
              "$$hashKey": "object:106884"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=244",
              "$$hashKey": "object:106885"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=245",
              "$$hashKey": "object:106886"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=246",
              "$$hashKey": "object:106887"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=247",
              "$$hashKey": "object:106888"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=248",
              "$$hashKey": "object:106889"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=249",
              "$$hashKey": "object:106890"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=250",
              "$$hashKey": "object:106891"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=251",
              "$$hashKey": "object:106892"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=252",
              "$$hashKey": "object:106893"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=253",
              "$$hashKey": "object:106894"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=254",
              "$$hashKey": "object:106895"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=255",
              "$$hashKey": "object:106896"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=256",
              "$$hashKey": "object:106897"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=257",
              "$$hashKey": "object:106898"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=258",
              "$$hashKey": "object:106899"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=259",
              "$$hashKey": "object:106900"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=260",
              "$$hashKey": "object:106901"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=261",
              "$$hashKey": "object:106902"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=262",
              "$$hashKey": "object:106903"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=263",
              "$$hashKey": "object:106904"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=264",
              "$$hashKey": "object:106905"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=265",
              "$$hashKey": "object:106906"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=266",
              "$$hashKey": "object:106907"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=267",
              "$$hashKey": "object:106908"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=268",
              "$$hashKey": "object:106909"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=269",
              "$$hashKey": "object:106910"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=270",
              "$$hashKey": "object:106911"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=271",
              "$$hashKey": "object:106912"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=272",
              "$$hashKey": "object:106913"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=273",
              "$$hashKey": "object:106914"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=274",
              "$$hashKey": "object:106915"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=275",
              "$$hashKey": "object:106916"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=276",
              "$$hashKey": "object:106917"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=277",
              "$$hashKey": "object:106918"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=278",
              "$$hashKey": "object:106919"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=279",
              "$$hashKey": "object:106920"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=280",
              "$$hashKey": "object:106921"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=281",
              "$$hashKey": "object:106922"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=282",
              "$$hashKey": "object:106923"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=283",
              "$$hashKey": "object:106924"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=284",
              "$$hashKey": "object:106925"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=285",
              "$$hashKey": "object:106926"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=286",
              "$$hashKey": "object:106927"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=287",
              "$$hashKey": "object:106928"
            },
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=288",
              "$$hashKey": "object:106929"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660174178241_130917961",
      "id": "paragraph_1660174178241_130917961",
      "dateCreated": "2022-08-10T23:29:38+0000",
      "dateStarted": "2022-08-22T19:40:21+0000",
      "dateFinished": "2022-08-22T19:46:12+0000",
      "status": "FINISHED",
      "$$hashKey": "object:220"
    },
    {
      "text": "%spark\nval columns = List(\"rows\", \"attributes\", \"average_time\", \"dispersion\")\nval dfResults = results.toDF(columns:_*)\ndfResults.show",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T21:10:36+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+----------+------------+----------+\n|  rows|attributes|average_time|dispersion|\n+------+----------+------------+----------+\n|  1000|         5|       1.275|     0.336|\n|  1000|        25|        3.93|     1.454|\n|  1000|        50|       8.539|     0.664|\n|  1000|       100|      21.115|     0.168|\n| 10000|         5|       2.032|     0.125|\n| 10000|        25|       3.437|     0.119|\n| 10000|        50|       6.388|     0.273|\n| 10000|       100|      15.346|     0.208|\n|100000|         5|       2.291|      0.17|\n|100000|        25|       3.953|     0.224|\n|100000|        50|       7.736|     0.645|\n|100000|       100|      18.093|     0.928|\n|200000|         5|       2.572|      0.22|\n|200000|        25|       4.665|     0.427|\n|200000|        50|       8.544|     0.305|\n|200000|       100|       19.38|     0.515|\n+------+----------+------------+----------+\n\n\u001b[1m\u001b[34mcolumns\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(rows, attributes, average_time, dispersion)\n\u001b[1m\u001b[34mdfResults\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [rows: bigint, attributes: int ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660246320692_582535886",
      "id": "paragraph_1660246320692_582535886",
      "dateCreated": "2022-08-11T19:32:00+0000",
      "dateStarted": "2022-08-22T20:04:36+0000",
      "dateFinished": "2022-08-22T20:04:36+0000",
      "status": "FINISHED",
      "$$hashKey": "object:221"
    },
    {
      "text": "%spark\n// run disabled\n// save test results DataFrame into one csv file\n// ignore any errors in cluster mode, the work should be done\ntry {\n    dfResults.repartition(1).write.option(\"header\", true).csv(\"/notebook/data/test_results/chunk_25_prevval_2W.2C_2G\")\n}\ncatch {\n    case _: Throwable => println(\"whoopsie\")\n}",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:05:19+0000",
      "progress": 100,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "whoopsie\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://d3150a5a73ad:4040/jobs/job?id=289",
              "$$hashKey": "object:107199"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660250583716_76829027",
      "id": "paragraph_1660250583716_76829027",
      "dateCreated": "2022-08-11T20:43:03+0000",
      "dateStarted": "2022-08-22T20:05:19+0000",
      "dateFinished": "2022-08-22T20:05:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:223"
    },
    {
      "title": "manual test",
      "text": "%spark\nval dfGenerated = spark.read.option(\"header\", true).csv(\"/notebook/data/generated_200k_100.csv\")\n\nval iterations = 2\nval w = Window.partitionBy(\"cnum\").orderBy(\"range_eff_date\")\nval columnsExcluded = List(\"cnum\", \"range_eff_date\", \"eff_date\", \"range_exp_date\", \"exp_date\", \"etl_ts\", \"ts\", \"delete_indicator\")\n\n// println(test(dfGenerated, columnsExcluded, w, iterations, \"chunk\", 20))\n\nspark.time({\nval dfGeneratedChanged = changeTypeInplace(dfGenerated, columnsExcluded, w)\n// dfGeneratedChanged.orderBy(\"cnum\", \"range_eff_date\").take(1)(0)\n// dfGeneratedChanged.show\ndfGeneratedChanged.take(1)(0)\n})",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:52:42+0000",
      "progress": 88,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Time taken: 16958 ms\n\u001b[1m\u001b[34mdfGenerated\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [cnum: string, range_eff_date: string ... 103 more fields]\n\u001b[1m\u001b[34miterations\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m = 2\n\u001b[1m\u001b[34mw\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.WindowSpec\u001b[0m = org.apache.spark.sql.expressions.WindowSpec@364955b3\n\u001b[1m\u001b[34mcolumnsExcluded\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(cnum, range_eff_date, eff_date, range_exp_date, exp_date, etl_ts, ts, delete_indicator)\n\u001b[1m\u001b[34mres16\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Row\u001b[0m = [10096,2018-11-15,2019-03-06,N,1542298118,new]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://52c4e6a77409:4040/jobs/job?id=50",
              "$$hashKey": "object:2458"
            },
            {
              "jobUrl": "http://52c4e6a77409:4040/jobs/job?id=51",
              "$$hashKey": "object:2459"
            },
            {
              "jobUrl": "http://52c4e6a77409:4040/jobs/job?id=52",
              "$$hashKey": "object:2460"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1659909711654_1175251589",
      "id": "paragraph_1659909711654_1175251589",
      "dateCreated": "2022-08-07T22:01:51+0000",
      "dateStarted": "2022-08-22T12:52:42+0000",
      "dateFinished": "2022-08-22T12:53:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:224"
    },
    {
      "text": "%md\n# Test results analysis",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T12:28:16+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Test results analysis</h1>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660246361305_1972802729",
      "id": "paragraph_1660246361305_1972802729",
      "dateCreated": "2022-08-11T19:32:41+0000",
      "dateStarted": "2022-08-22T12:28:16+0000",
      "dateFinished": "2022-08-22T12:28:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:225"
    },
    {
      "text": "%python\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport os",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:05:48+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660150053567_1394866225",
      "id": "paragraph_1660150053567_1394866225",
      "dateCreated": "2022-08-10T16:47:33+0000",
      "dateStarted": "2022-08-22T20:05:48+0000",
      "dateFinished": "2022-08-22T20:05:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:226"
    },
    {
      "text": "%python\npath_chunk = \"/notebook/data/test_results/chunk_25_2W.2C_2G\"\npath_chunk_prevValue = \"/notebook/data/test_results/chunk_25_prevval_2W.2C_2G\"\n\nfilename_chunk = list(filter(lambda file_name: file_name.endswith(\".csv\"), os.listdir(path_chunk)))[0]\nfilename_chunk_prevValue = list(filter(lambda file_name: file_name.endswith(\".csv\"), os.listdir(path_chunk_prevValue)))[0]\n\n# read previously saved test results data\ndf_chunk = pd.read_csv(path_chunk+\"/\"+filename_chunk).sort_values([\"rows\", \"attributes\"]).reset_index(drop=True)\ndf_chunk_prevValue = pd.read_csv(path_chunk_prevValue+\"/\"+filename_chunk_prevValue).sort_values([\"rows\", \"attributes\"]).reset_index(drop=True)",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:49:12+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660307927115_1444521787",
      "id": "paragraph_1660307927115_1444521787",
      "dateCreated": "2022-08-12T12:38:47+0000",
      "dateStarted": "2022-08-22T20:49:13+0000",
      "dateFinished": "2022-08-22T20:49:13+0000",
      "status": "FINISHED",
      "$$hashKey": "object:227"
    },
    {
      "text": "%python\ndf_chunk.head()",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:49:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rows</th>\n      <th>attributes</th>\n      <th>average_time</th>\n      <th>dispersion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000</td>\n      <td>5</td>\n      <td>5.928</td>\n      <td>2.271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000</td>\n      <td>25</td>\n      <td>12.134</td>\n      <td>3.803</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1000</td>\n      <td>50</td>\n      <td>23.377</td>\n      <td>3.480</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1000</td>\n      <td>100</td>\n      <td>62.819</td>\n      <td>1.620</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10000</td>\n      <td>5</td>\n      <td>4.466</td>\n      <td>0.354</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660566718807_1923038114",
      "id": "paragraph_1660566718807_1923038114",
      "dateCreated": "2022-08-15T12:31:58+0000",
      "dateStarted": "2022-08-22T20:49:18+0000",
      "dateFinished": "2022-08-22T20:49:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:228"
    },
    {
      "text": "%python\ndf_chunk_prevValue.head()",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:49:21+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rows</th>\n      <th>attributes</th>\n      <th>average_time</th>\n      <th>dispersion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000</td>\n      <td>5</td>\n      <td>1.275</td>\n      <td>0.336</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1000</td>\n      <td>25</td>\n      <td>3.930</td>\n      <td>1.454</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1000</td>\n      <td>50</td>\n      <td>8.539</td>\n      <td>0.664</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1000</td>\n      <td>100</td>\n      <td>21.115</td>\n      <td>0.168</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10000</td>\n      <td>5</td>\n      <td>2.032</td>\n      <td>0.125</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660256401106_1332397315",
      "id": "paragraph_1660256401106_1332397315",
      "dateCreated": "2022-08-11T22:20:01+0000",
      "dateStarted": "2022-08-22T20:49:21+0000",
      "dateFinished": "2022-08-22T20:49:21+0000",
      "status": "FINISHED",
      "$$hashKey": "object:229"
    },
    {
      "text": "%python\ndef plot_perfomance(df: pd.DataFrame, plot_title: str=\"\"):\n    \"Makes 2 plots figure\"\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(20, 5))\n    fig.suptitle(plot_title, fontsize=20)\n    fig.patch.set_facecolor(\"white\")\n    \n    ax1.set_ylabel(\"run time(s)\")\n    ax1.set_xlabel(\"rows\")\n    \n    ax2.set_ylabel(\"run time(s)\")\n    ax2.set_xlabel(\"attributes\")\n    \n    ax1.grid(True)\n    ax2.grid(True)\n    \n    ax1.set_title(\"perfomance\")\n    ax2.set_title(\"perfomance\")\n    \n    attrs_list = df.attributes.unique()\n    rows_list = df.rows.unique()\n    \n    for attribute in attrs_list[::-1]:\n        ax1.plot(df[df.attributes == attribute].rows, df[df.attributes == attribute].average_time, label=f\"{attribute} attributes\")\n    \n    for row in rows_list[::-1]:\n        ax2.plot(df[df.rows == row].attributes, df[df.rows == row].average_time, label=f\"{row} rows\")\n    \n    ax1.legend()\n    ax2.legend()\n    plt.show()",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:47:36+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660564146662_635563239",
      "id": "paragraph_1660564146662_635563239",
      "dateCreated": "2022-08-15T11:49:06+0000",
      "dateStarted": "2022-08-22T20:47:36+0000",
      "dateFinished": "2022-08-22T20:47:36+0000",
      "status": "FINISHED",
      "$$hashKey": "object:230"
    },
    {
      "text": "%python\nplot_perfomance(df_chunk, \"2 workers - 2 cores 2 gigs, no prev value\")",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:49:34+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660724744787_81048636",
      "id": "paragraph_1660724744787_81048636",
      "dateCreated": "2022-08-17T08:25:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:231",
      "dateFinished": "2022-08-22T20:49:34+0000",
      "dateStarted": "2022-08-22T20:49:34+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      }
    },
    {
      "text": "%python\nplot_perfomance(df_chunk_prevValue, \"2 workers - 2 cores 2 gigs, with prev value\")",
      "user": "anonymous",
      "dateUpdated": "2022-08-22T20:49:52+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660566132440_568326941",
      "id": "paragraph_1660566132440_568326941",
      "dateCreated": "2022-08-15T12:22:12+0000",
      "dateStarted": "2022-08-22T20:49:52+0000",
      "dateFinished": "2022-08-22T20:49:53+0000",
      "status": "FINISHED",
      "$$hashKey": "object:232"
    },
    {
      "text": "%md\n### RESULTS\nFirst plot in \"ChangeTypeChunk\" graph shows that chunk method behaves relatively stable under different dataframe sizes of rows. Second plot in this graph tells that dependence between number of attributes and time has exponential nature.\n\nFrom second graph \"ChangeTypeInplace\" we can see that increase of rows causes linear time growth. And this approach is susceptible to number of attributes.\n",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T13:03:19+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>RESULTS</h3>\n<p>First plot in &ldquo;ChangeTypeChunk&rdquo; graph shows that chunk method behaves relatively stable under different dataframe sizes of rows. Second plot in this graph tells that dependence between number of attributes and time has exponential nature.</p>\n<p>From second graph &ldquo;ChangeTypeInplace&rdquo; we can see that increase of rows causes linear time growth. And this approach is susceptible to number of attributes.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660029604829_1411745967",
      "id": "paragraph_1660029604829_1411745967",
      "dateCreated": "2022-08-09T07:20:04+0000",
      "dateStarted": "2022-08-15T13:03:16+0000",
      "dateFinished": "2022-08-15T13:03:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:234"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2022-08-15T00:39:19+0000",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1660234503273_1048892605",
      "id": "paragraph_1660234503273_1048892605",
      "dateCreated": "2022-08-11T16:15:03+0000",
      "status": "READY",
      "$$hashKey": "object:236"
    }
  ],
  "name": "change_type",
  "id": "2H822SC5U",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "simple",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/change_type"
}